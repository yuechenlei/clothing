<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/jee
    http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	">

	<!-- 加载properties文件 <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"> 
		<property name="locations"> <array> <value>classpath:mariadb.properties</value> 
		</array> </property> <property name="ignoreResourceNotFound" value="false" 
		/> </bean> -->

	<!-- <beans profile="development"> -->
	<beans>

		<bean id="dataSource"
			class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
			destroy-method="close">
			<!-- 基本属性 url、user、password -->
			<property name="driverClassName"
				value="${dataSource.driverClassName}" />
			<property name="url" value="${dataSource.url}" />
			<property name="username" value="${dataSource.username}" />
			<property name="password" value="${dataSource.password}" />

			<!-- 初始化大小、最小、最大 -->
			<property name="initialSize"
				value="${dataSource.initialSize}" />
			<property name="minIdle" value="${dataSource.minIdle}" />
			<property name="maxIdle" value="${dataSource.maxIdle}" />
			<property name="maxActive" value="${dataSource.maxActive}" />

			<!-- 获取连接等待超时的时间 -->
			<property name="maxWait" value="${dataSource.maxWait}" />

			<!-- 间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />

			<!-- 一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="300000" />

			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />

			<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
			<property name="poolPreparedStatements" value="true" />
			<property name="maxPoolPreparedStatementPerConnectionSize"
				value="20" />

			<!-- 配置监控统计拦截的filters,防御SQL注入攻击wall -->
			<property name="filters" value="wall,stat,slf4j" />
		</bean>

		<!-- Druid和Spring关联监控配置 -->
		<bean id="druid-stat-interceptor"
			class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
		</bean>

		<bean id="druid-stat-pointcut"
			class="org.springframework.aop.support.JdkRegexpMethodPointcut"
			scope="prototype">
			<property name="patterns">
				<list>
					<value>com.xiaoqingxin.customClothing.service.impl.*</value>
				</list>
			</property>
		</bean>

		<aop:config>
			<aop:advisor advice-ref="druid-stat-interceptor"
				pointcut-ref="druid-stat-pointcut" order="1" />
		</aop:config>


        <!-- mybatis配置 -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="configLocation" value="classpath:mybatis-config.xml" />
		</bean>

		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="basePackage" value="com.xiaoqingxin.customClothing.mapper" />
			<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
			<!-- 使用sqlSessionTemplateBeanName将覆盖sqlSessionFactoryBeanName的配置 -->
			<!-- <property name="sqlSessionTemplateBeanName" value="sqlSessionFactory"/> -->
			<!-- 指定标注@Repository,才扫描成为Mapper -->
			<property name="annotationClass" value="org.springframework.stereotype.Repository" />
		</bean>

		<!-- 事务管理器 配置数据源 -->
		<bean id="transactionManager"
			  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource" />
		</bean>
		<!-- 使用注解定义事务 -->
		<tx:annotation-driven transaction-manager="transactionManager" order="0" />


	</beans>

</beans>